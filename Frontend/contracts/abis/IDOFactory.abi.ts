export const IDOFactory = [
  {
    type: "constructor",
    inputs: [
      { name: "_aoiFactory", type: "address", internalType: "address" },
      { name: "_aoiRouter", type: "address", internalType: "address" },
      { name: "_WETH", type: "address", internalType: "address" },
    ],
    stateMutability: "nonpayable",
  },
  { type: "receive", stateMutability: "payable" },
  {
    type: "function",
    name: "AOI_DEX_FACTORY",
    inputs: [],
    outputs: [{ name: "", type: "address", internalType: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "AOI_DEX_ROUTER",
    inputs: [],
    outputs: [{ name: "", type: "address", internalType: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "EMPTY_MERKLE_ROOT",
    inputs: [],
    outputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "IDO_FEE_RATE",
    inputs: [],
    outputs: [{ name: "", type: "uint16", internalType: "uint16" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "MIN_LOCKED_DURATION",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "WETH",
    inputs: [],
    outputs: [{ name: "", type: "address", internalType: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "checkPoolIsValid",
    inputs: [
      { name: "poolId", type: "uint256", internalType: "uint256" },
    ],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "createPool",
    inputs: [
      {
        name: "poolDetails",
        type: "tuple",
        internalType: "struct IIDOPool.IDOPoolDetails",
        components: [
          { name: "tokenAddress", type: "address", internalType: "address" },
          { name: "pricePerToken", type: "uint256", internalType: "uint256" },
          { name: "raisedAmount", type: "uint256", internalType: "uint256" },
          { name: "raisedTokenAmount", type: "uint256", internalType: "uint256" },
          { name: "softCap", type: "uint256", internalType: "uint256" },
          { name: "hardCap", type: "uint256", internalType: "uint256" },
          { name: "minInvest", type: "uint256", internalType: "uint256" },
          { name: "maxInvest", type: "uint256", internalType: "uint256" },
          { name: "liquidityWETH9", type: "uint256", internalType: "uint256" },
          { name: "liquidityToken", type: "uint256", internalType: "uint256" },
          { name: "privateSaleAmount", type: "uint256", internalType: "uint256" },
        ],
      },
      {
        name: "poolTime",
        type: "tuple",
        internalType: "struct IIDOPool.IDOTime",
        components: [
          { name: "startTime", type: "uint256", internalType: "uint256" },
          { name: "endTime", type: "uint256", internalType: "uint256" },
          { name: "startPublicSale", type: "uint256", internalType: "uint256" },
        ],
      },
      { name: "privateSale", type: "bool", internalType: "bool" },
      { name: "whitelisted", type: "bytes32", internalType: "bytes32" },
      {
        name: "action",
        type: "uint8",
        internalType: "enum IIDOFactory.LiquidityPoolAction",
      },
      { name: "lockExpired", type: "uint256", internalType: "uint256" },
    ],
    outputs: [
      { name: "poolAddress", type: "address", internalType: "address" },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "getPools",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "withdrawPoolFunds",
    inputs: [
      { name: "poolId", type: "uint256", internalType: "uint256" },
      { name: "to", type: "address", internalType: "address" },
    ],
    outputs: [{ name: "success", type: "bool", internalType: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "depositLiquidityPool",
    inputs: [
      { name: "poolId", type: "uint256", internalType: "uint256" },
    ],
    outputs: [
      {
        name: "liquidityPoolAddress",
        type: "address",
        internalType: "address",
      },
      { name: "lpAmount", type: "uint256", internalType: "uint256" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updatePool",
    inputs: [
      { name: "poolId", type: "uint256", internalType: "uint256" },
      {
        name: "newDetails",
        type: "tuple",
        internalType: "struct IIDOPool.IDOPoolDetails",
        components: [
          { name: "tokenAddress", type: "address", internalType: "address" },
          { name: "pricePerToken", type: "uint256", internalType: "uint256" },
          { name: "raisedAmount", type: "uint256", internalType: "uint256" },
          { name: "raisedTokenAmount", type: "uint256", internalType: "uint256" },
          { name: "softCap", type: "uint256", internalType: "uint256" },
          { name: "hardCap", type: "uint256", internalType: "uint256" },
          { name: "minInvest", type: "uint256", internalType: "uint256" },
          { name: "maxInvest", type: "uint256", internalType: "uint256" },
          { name: "liquidityWETH9", type: "uint256", internalType: "uint256" },
          { name: "liquidityToken", type: "uint256", internalType: "uint256" },
          { name: "privateSaleAmount", type: "uint256", internalType: "uint256" },
        ],
      },
    ],
    outputs: [{ name: "success", type: "bool", internalType: "bool" }],
    stateMutability: "nonpayable",
  },
];
