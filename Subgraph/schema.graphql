type Count @entity {
  id: Bytes!
  idoTotal: BigInt!
  idoPrivateTotal: BigInt!
  idoPublicTotal: BigInt!
  idoSuccessTotal: BigInt! # @note - Reached softCap
  investedTotal: BigInt!
}

type AnalysisDaily @entity {
  id: Bytes!
  date: BigInt!
  raised: BigInt!
  volume: BigInt!
}

type AnalysisIDODaily @entity {
  id: Bytes!
  idoPool: IDOPool!
  date: BigInt!
  raised: BigInt!
  volume: BigInt!
}

type Account @entity {
  id: Bytes!
  address: Bytes! #address
  investors: [Investor!] @derivedFrom(field: "account")
  poolOwners: [PoolOwner!] @derivedFrom(field: "account")
  tokens: [Token!] @derivedFrom(field: "creator")
  investedTotal: BigInt!
  investedTotalAmount: BigInt!
  raisedTotal: BigInt!
  raisedTotalAmount: BigInt!
}

type Investor @entity {
  id: Bytes!
  account: Account!
  idoPool: IDOPool!
  activities: [InvestorActivity!] @derivedFrom(field: "investor")

  registered: Boolean!
  claimed: Boolean! # Track if investor claimed
}

type InvestorActivity @entity(immutable: true) {
  id: Bytes!
  investor: Investor!
  idoPool: IDOPool!
  type: ActivityType!
  value: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
}

type PoolOwner @entity {
  id: Bytes! #address
  account: Account!
  idoPool: IDOPool!
  raised: BigInt!
  listingTransactionHash: Bytes
}

type Token @entity(immutable: true) {
  id: Bytes! #address
  address: Bytes!
  tokenId: BigInt!
  creator: Account!
  name: String!
  symbol: String!
  initialSupply: BigInt!
  maxTotalSupply: BigInt!
  createdTime: BigInt!
}

type LiquidityPool @entity {
  id: Bytes! #address
  idoPool: IDOPool!
  token0: Bytes! #address
  token1: Bytes! #address
  token0Amount: BigInt!
  token1Amount: BigInt!
  liquidityPoolAddress: Bytes! #address
  action: LiquidityPoolAction!
  lpToAddress: Bytes! #address
  lockExpired: BigInt!
  createdTime: BigInt!
}

type IDOPool @entity {
  id: Bytes!
  poolId: BigInt!
  poolOwner: PoolOwner!
  investors: [Investor!] @derivedFrom(field: "idoPool")
  poolAddress: Bytes! #address
  tokenPool: Bytes! #address
  pricePerToken: BigInt! # the ratio exchanging from token to eth
  createdTime: BigInt!
  startTime: BigInt!
  startPublicSale: BigInt!
  endTime: BigInt!
  raisedAmount: BigInt! # ETH
  raisedTokenAmount: BigInt!
  softCap: BigInt!
  hardCap: BigInt!
  minInvest: BigInt!
  maxInvest: BigInt!
  liquidityTokenAmount: BigInt!
  liquidityWETHAmount: BigInt!
  whitelistedRoot: Bytes
  idoType: IDOType!
  liquidityPool: LiquidityPool!
  analysisDaily: [AnalysisIDODaily!] @derivedFrom(field: "idoPool")
  investorActivities: [InvestorActivity!] @derivedFrom(field: "idoPool")
}

enum IDOType {
  PUBLIC_SALE
  PRIVATE_SALE
}

enum LiquidityPoolAction {
  NOTHING # -> owner address
  LOCK # -> factory address
  BURN # -> zero address
}

enum ActivityType {
  INVEST
  CANCEL_INVESTMENT
  REFUND
  CLAIM
}
